// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: check-oneof.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_check_2doneof_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_check_2doneof_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_check_2doneof_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_check_2doneof_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_check_2doneof_2eproto;
class Bar;
struct BarDefaultTypeInternal;
extern BarDefaultTypeInternal _Bar_default_instance_;
class Foo;
struct FooDefaultTypeInternal;
extern FooDefaultTypeInternal _Foo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Bar* Arena::CreateMaybeMessage<::Bar>(Arena*);
template<> ::Foo* Arena::CreateMaybeMessage<::Foo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Bar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Bar) */ {
 public:
  inline Bar() : Bar(nullptr) {}
  ~Bar() override;
  explicit PROTOBUF_CONSTEXPR Bar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bar(const Bar& from);
  Bar(Bar&& from) noexcept
    : Bar() {
    *this = ::std::move(from);
  }

  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bar& operator=(Bar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bar* internal_default_instance() {
    return reinterpret_cast<const Bar*>(
               &_Bar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Bar& a, Bar& b) {
    a.Swap(&b);
  }
  inline void Swap(Bar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bar& from) {
    Bar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bar";
  }
  protected:
  explicit Bar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscriptionFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string discription = 1;
  void clear_discription();
  const std::string& discription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_discription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_discription();
  PROTOBUF_NODISCARD std::string* release_discription();
  void set_allocated_discription(std::string* discription);
  private:
  const std::string& _internal_discription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_discription(const std::string& value);
  std::string* _internal_mutable_discription();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:Bar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr discription_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_check_2doneof_2eproto;
};
// -------------------------------------------------------------------

class Foo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Foo) */ {
 public:
  inline Foo() : Foo(nullptr) {}
  ~Foo() override;
  explicit PROTOBUF_CONSTEXPR Foo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Foo(const Foo& from);
  Foo(Foo&& from) noexcept
    : Foo() {
    *this = ::std::move(from);
  }

  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Foo& operator=(Foo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Foo& default_instance() {
    return *internal_default_instance();
  }
  enum ItemCase {
    kAge = 1,
    kIsMale = 2,
    kPower = 3,
    kInnerBar = 4,
    ITEM_NOT_SET = 0,
  };

  static inline const Foo* internal_default_instance() {
    return reinterpret_cast<const Foo*>(
               &_Foo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Foo& a, Foo& b) {
    a.Swap(&b);
  }
  inline void Swap(Foo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Foo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Foo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Foo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Foo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Foo& from) {
    Foo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Foo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Foo";
  }
  protected:
  explicit Foo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 5,
    kAgeFieldNumber = 1,
    kIsMaleFieldNumber = 2,
    kPowerFieldNumber = 3,
    kInnerBarFieldNumber = 4,
  };
  // bytes properties = 5;
  void clear_properties();
  const std::string& properties() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_properties(ArgT0&& arg0, ArgT... args);
  std::string* mutable_properties();
  PROTOBUF_NODISCARD std::string* release_properties();
  void set_allocated_properties(std::string* properties);
  private:
  const std::string& _internal_properties() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_properties(const std::string& value);
  std::string* _internal_mutable_properties();
  public:

  // int32 age = 1;
  bool has_age() const;
  private:
  bool _internal_has_age() const;
  public:
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // bool is_male = 2;
  bool has_is_male() const;
  private:
  bool _internal_has_is_male() const;
  public:
  void clear_is_male();
  bool is_male() const;
  void set_is_male(bool value);
  private:
  bool _internal_is_male() const;
  void _internal_set_is_male(bool value);
  public:

  // double power = 3;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  double power() const;
  void set_power(double value);
  private:
  double _internal_power() const;
  void _internal_set_power(double value);
  public:

  // .Bar innerBar = 4;
  bool has_innerbar() const;
  private:
  bool _internal_has_innerbar() const;
  public:
  void clear_innerbar();
  const ::Bar& innerbar() const;
  PROTOBUF_NODISCARD ::Bar* release_innerbar();
  ::Bar* mutable_innerbar();
  void set_allocated_innerbar(::Bar* innerbar);
  private:
  const ::Bar& _internal_innerbar() const;
  ::Bar* _internal_mutable_innerbar();
  public:
  void unsafe_arena_set_allocated_innerbar(
      ::Bar* innerbar);
  ::Bar* unsafe_arena_release_innerbar();

  void clear_item();
  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:Foo)
 private:
  class _Internal;
  void set_has_age();
  void set_has_is_male();
  void set_has_power();
  void set_has_innerbar();

  inline bool has_item() const;
  inline void clear_has_item();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr properties_;
    union ItemUnion {
      constexpr ItemUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t age_;
      bool is_male_;
      double power_;
      ::Bar* innerbar_;
    } item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_check_2doneof_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Bar

// string discription = 1;
inline void Bar::clear_discription() {
  _impl_.discription_.ClearToEmpty();
}
inline const std::string& Bar::discription() const {
  // @@protoc_insertion_point(field_get:Bar.discription)
  return _internal_discription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bar::set_discription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.discription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bar.discription)
}
inline std::string* Bar::mutable_discription() {
  std::string* _s = _internal_mutable_discription();
  // @@protoc_insertion_point(field_mutable:Bar.discription)
  return _s;
}
inline const std::string& Bar::_internal_discription() const {
  return _impl_.discription_.Get();
}
inline void Bar::_internal_set_discription(const std::string& value) {
  
  _impl_.discription_.Set(value, GetArenaForAllocation());
}
inline std::string* Bar::_internal_mutable_discription() {
  
  return _impl_.discription_.Mutable(GetArenaForAllocation());
}
inline std::string* Bar::release_discription() {
  // @@protoc_insertion_point(field_release:Bar.discription)
  return _impl_.discription_.Release();
}
inline void Bar::set_allocated_discription(std::string* discription) {
  if (discription != nullptr) {
    
  } else {
    
  }
  _impl_.discription_.SetAllocated(discription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.discription_.IsDefault()) {
    _impl_.discription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bar.discription)
}

// bytes payload = 2;
inline void Bar::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Bar::payload() const {
  // @@protoc_insertion_point(field_get:Bar.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bar::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Bar.payload)
}
inline std::string* Bar::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:Bar.payload)
  return _s;
}
inline const std::string& Bar::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void Bar::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* Bar::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* Bar::release_payload() {
  // @@protoc_insertion_point(field_release:Bar.payload)
  return _impl_.payload_.Release();
}
inline void Bar::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bar.payload)
}

// -------------------------------------------------------------------

// Foo

// int32 age = 1;
inline bool Foo::_internal_has_age() const {
  return item_case() == kAge;
}
inline bool Foo::has_age() const {
  return _internal_has_age();
}
inline void Foo::set_has_age() {
  _impl_._oneof_case_[0] = kAge;
}
inline void Foo::clear_age() {
  if (_internal_has_age()) {
    _impl_.item_.age_ = 0;
    clear_has_item();
  }
}
inline int32_t Foo::_internal_age() const {
  if (_internal_has_age()) {
    return _impl_.item_.age_;
  }
  return 0;
}
inline void Foo::_internal_set_age(int32_t value) {
  if (!_internal_has_age()) {
    clear_item();
    set_has_age();
  }
  _impl_.item_.age_ = value;
}
inline int32_t Foo::age() const {
  // @@protoc_insertion_point(field_get:Foo.age)
  return _internal_age();
}
inline void Foo::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Foo.age)
}

// bool is_male = 2;
inline bool Foo::_internal_has_is_male() const {
  return item_case() == kIsMale;
}
inline bool Foo::has_is_male() const {
  return _internal_has_is_male();
}
inline void Foo::set_has_is_male() {
  _impl_._oneof_case_[0] = kIsMale;
}
inline void Foo::clear_is_male() {
  if (_internal_has_is_male()) {
    _impl_.item_.is_male_ = false;
    clear_has_item();
  }
}
inline bool Foo::_internal_is_male() const {
  if (_internal_has_is_male()) {
    return _impl_.item_.is_male_;
  }
  return false;
}
inline void Foo::_internal_set_is_male(bool value) {
  if (!_internal_has_is_male()) {
    clear_item();
    set_has_is_male();
  }
  _impl_.item_.is_male_ = value;
}
inline bool Foo::is_male() const {
  // @@protoc_insertion_point(field_get:Foo.is_male)
  return _internal_is_male();
}
inline void Foo::set_is_male(bool value) {
  _internal_set_is_male(value);
  // @@protoc_insertion_point(field_set:Foo.is_male)
}

// double power = 3;
inline bool Foo::_internal_has_power() const {
  return item_case() == kPower;
}
inline bool Foo::has_power() const {
  return _internal_has_power();
}
inline void Foo::set_has_power() {
  _impl_._oneof_case_[0] = kPower;
}
inline void Foo::clear_power() {
  if (_internal_has_power()) {
    _impl_.item_.power_ = 0;
    clear_has_item();
  }
}
inline double Foo::_internal_power() const {
  if (_internal_has_power()) {
    return _impl_.item_.power_;
  }
  return 0;
}
inline void Foo::_internal_set_power(double value) {
  if (!_internal_has_power()) {
    clear_item();
    set_has_power();
  }
  _impl_.item_.power_ = value;
}
inline double Foo::power() const {
  // @@protoc_insertion_point(field_get:Foo.power)
  return _internal_power();
}
inline void Foo::set_power(double value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:Foo.power)
}

// .Bar innerBar = 4;
inline bool Foo::_internal_has_innerbar() const {
  return item_case() == kInnerBar;
}
inline bool Foo::has_innerbar() const {
  return _internal_has_innerbar();
}
inline void Foo::set_has_innerbar() {
  _impl_._oneof_case_[0] = kInnerBar;
}
inline void Foo::clear_innerbar() {
  if (_internal_has_innerbar()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.innerbar_;
    }
    clear_has_item();
  }
}
inline ::Bar* Foo::release_innerbar() {
  // @@protoc_insertion_point(field_release:Foo.innerBar)
  if (_internal_has_innerbar()) {
    clear_has_item();
    ::Bar* temp = _impl_.item_.innerbar_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.innerbar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Bar& Foo::_internal_innerbar() const {
  return _internal_has_innerbar()
      ? *_impl_.item_.innerbar_
      : reinterpret_cast< ::Bar&>(::_Bar_default_instance_);
}
inline const ::Bar& Foo::innerbar() const {
  // @@protoc_insertion_point(field_get:Foo.innerBar)
  return _internal_innerbar();
}
inline ::Bar* Foo::unsafe_arena_release_innerbar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Foo.innerBar)
  if (_internal_has_innerbar()) {
    clear_has_item();
    ::Bar* temp = _impl_.item_.innerbar_;
    _impl_.item_.innerbar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Foo::unsafe_arena_set_allocated_innerbar(::Bar* innerbar) {
  clear_item();
  if (innerbar) {
    set_has_innerbar();
    _impl_.item_.innerbar_ = innerbar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Foo.innerBar)
}
inline ::Bar* Foo::_internal_mutable_innerbar() {
  if (!_internal_has_innerbar()) {
    clear_item();
    set_has_innerbar();
    _impl_.item_.innerbar_ = CreateMaybeMessage< ::Bar >(GetArenaForAllocation());
  }
  return _impl_.item_.innerbar_;
}
inline ::Bar* Foo::mutable_innerbar() {
  ::Bar* _msg = _internal_mutable_innerbar();
  // @@protoc_insertion_point(field_mutable:Foo.innerBar)
  return _msg;
}

// bytes properties = 5;
inline void Foo::clear_properties() {
  _impl_.properties_.ClearToEmpty();
}
inline const std::string& Foo::properties() const {
  // @@protoc_insertion_point(field_get:Foo.properties)
  return _internal_properties();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Foo::set_properties(ArgT0&& arg0, ArgT... args) {
 
 _impl_.properties_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Foo.properties)
}
inline std::string* Foo::mutable_properties() {
  std::string* _s = _internal_mutable_properties();
  // @@protoc_insertion_point(field_mutable:Foo.properties)
  return _s;
}
inline const std::string& Foo::_internal_properties() const {
  return _impl_.properties_.Get();
}
inline void Foo::_internal_set_properties(const std::string& value) {
  
  _impl_.properties_.Set(value, GetArenaForAllocation());
}
inline std::string* Foo::_internal_mutable_properties() {
  
  return _impl_.properties_.Mutable(GetArenaForAllocation());
}
inline std::string* Foo::release_properties() {
  // @@protoc_insertion_point(field_release:Foo.properties)
  return _impl_.properties_.Release();
}
inline void Foo::set_allocated_properties(std::string* properties) {
  if (properties != nullptr) {
    
  } else {
    
  }
  _impl_.properties_.SetAllocated(properties, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.properties_.IsDefault()) {
    _impl_.properties_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Foo.properties)
}

inline bool Foo::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void Foo::clear_has_item() {
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}
inline Foo::ItemCase Foo::item_case() const {
  return Foo::ItemCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_check_2doneof_2eproto
