// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: check-oneof.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_check_2doneof_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_check_2doneof_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_check_2doneof_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_check_2doneof_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_check_2doneof_2eproto;
class Bar;
struct BarDefaultTypeInternal;
extern BarDefaultTypeInternal _Bar_default_instance_;
class Foo;
struct FooDefaultTypeInternal;
extern FooDefaultTypeInternal _Foo_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Bar final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Bar) */ {
 public:
  inline Bar() : Bar(nullptr) {}
  ~Bar() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Bar(
      ::google::protobuf::internal::ConstantInitialized);

  inline Bar(const Bar& from) : Bar(nullptr, from) {}
  inline Bar(Bar&& from) noexcept
      : Bar(nullptr, std::move(from)) {}
  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bar& operator=(Bar&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bar* internal_default_instance() {
    return reinterpret_cast<const Bar*>(
        &_Bar_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Bar& a, Bar& b) { a.Swap(&b); }
  inline void Swap(Bar* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bar* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Bar>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Bar& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Bar& from) { Bar::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Bar* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Bar"; }

 protected:
  explicit Bar(::google::protobuf::Arena* arena);
  Bar(::google::protobuf::Arena* arena, const Bar& from);
  Bar(::google::protobuf::Arena* arena, Bar&& from) noexcept
      : Bar(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDiscriptionFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string discription = 1;
  void clear_discription() ;
  const std::string& discription() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_discription(Arg_&& arg, Args_... args);
  std::string* mutable_discription();
  PROTOBUF_NODISCARD std::string* release_discription();
  void set_allocated_discription(std::string* value);

  private:
  const std::string& _internal_discription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_discription(
      const std::string& value);
  std::string* _internal_mutable_discription();

  public:
  // bytes payload = 2;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // @@protoc_insertion_point(class_scope:Bar)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      23, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Bar_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr discription_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_check_2doneof_2eproto;
};
// -------------------------------------------------------------------

class Foo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Foo) */ {
 public:
  inline Foo() : Foo(nullptr) {}
  ~Foo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Foo(
      ::google::protobuf::internal::ConstantInitialized);

  inline Foo(const Foo& from) : Foo(nullptr, from) {}
  inline Foo(Foo&& from) noexcept
      : Foo(nullptr, std::move(from)) {}
  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Foo& operator=(Foo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Foo& default_instance() {
    return *internal_default_instance();
  }
  enum ItemCase {
    kAge = 1,
    kIsMale = 2,
    kPower = 3,
    kInnerBar = 4,
    ITEM_NOT_SET = 0,
  };
  static inline const Foo* internal_default_instance() {
    return reinterpret_cast<const Foo*>(
        &_Foo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Foo& a, Foo& b) { a.Swap(&b); }
  inline void Swap(Foo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Foo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Foo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Foo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Foo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Foo& from) { Foo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Foo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Foo"; }

 protected:
  explicit Foo(::google::protobuf::Arena* arena);
  Foo(::google::protobuf::Arena* arena, const Foo& from);
  Foo(::google::protobuf::Arena* arena, Foo&& from) noexcept
      : Foo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPropertiesFieldNumber = 5,
    kAgeFieldNumber = 1,
    kIsMaleFieldNumber = 2,
    kPowerFieldNumber = 3,
    kInnerBarFieldNumber = 4,
  };
  // bytes properties = 5;
  void clear_properties() ;
  const std::string& properties() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_properties(Arg_&& arg, Args_... args);
  std::string* mutable_properties();
  PROTOBUF_NODISCARD std::string* release_properties();
  void set_allocated_properties(std::string* value);

  private:
  const std::string& _internal_properties() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_properties(
      const std::string& value);
  std::string* _internal_mutable_properties();

  public:
  // int32 age = 1;
  bool has_age() const;
  void clear_age() ;
  ::int32_t age() const;
  void set_age(::int32_t value);

  private:
  ::int32_t _internal_age() const;
  void _internal_set_age(::int32_t value);

  public:
  // bool is_male = 2;
  bool has_is_male() const;
  void clear_is_male() ;
  bool is_male() const;
  void set_is_male(bool value);

  private:
  bool _internal_is_male() const;
  void _internal_set_is_male(bool value);

  public:
  // double power = 3;
  bool has_power() const;
  void clear_power() ;
  double power() const;
  void set_power(double value);

  private:
  double _internal_power() const;
  void _internal_set_power(double value);

  public:
  // .Bar innerBar = 4;
  bool has_innerbar() const;
  private:
  bool _internal_has_innerbar() const;

  public:
  void clear_innerbar() ;
  const ::Bar& innerbar() const;
  PROTOBUF_NODISCARD ::Bar* release_innerbar();
  ::Bar* mutable_innerbar();
  void set_allocated_innerbar(::Bar* value);
  void unsafe_arena_set_allocated_innerbar(::Bar* value);
  ::Bar* unsafe_arena_release_innerbar();

  private:
  const ::Bar& _internal_innerbar() const;
  ::Bar* _internal_mutable_innerbar();

  public:
  void clear_item();
  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:Foo)
 private:
  class _Internal;
  void set_has_age();
  void set_has_is_male();
  void set_has_power();
  void set_has_innerbar();
  inline bool has_item() const;
  inline void clear_has_item();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Foo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr properties_;
    union ItemUnion {
      constexpr ItemUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t age_;
      bool is_male_;
      double power_;
      ::Bar* innerbar_;
    } item_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_check_2doneof_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Bar

// string discription = 1;
inline void Bar::clear_discription() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.discription_.ClearToEmpty();
}
inline const std::string& Bar::discription() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Bar.discription)
  return _internal_discription();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bar::set_discription(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.discription_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Bar.discription)
}
inline std::string* Bar::mutable_discription() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_discription();
  // @@protoc_insertion_point(field_mutable:Bar.discription)
  return _s;
}
inline const std::string& Bar::_internal_discription() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.discription_.Get();
}
inline void Bar::_internal_set_discription(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.discription_.Set(value, GetArena());
}
inline std::string* Bar::_internal_mutable_discription() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.discription_.Mutable( GetArena());
}
inline std::string* Bar::release_discription() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Bar.discription)
  return _impl_.discription_.Release();
}
inline void Bar::set_allocated_discription(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.discription_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.discription_.IsDefault()) {
          _impl_.discription_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bar.discription)
}

// bytes payload = 2;
inline void Bar::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Bar::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Bar.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bar::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Bar.payload)
}
inline std::string* Bar::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:Bar.payload)
  return _s;
}
inline const std::string& Bar::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void Bar::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* Bar::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* Bar::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Bar.payload)
  return _impl_.payload_.Release();
}
inline void Bar::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Bar.payload)
}

// -------------------------------------------------------------------

// Foo

// int32 age = 1;
inline bool Foo::has_age() const {
  return item_case() == kAge;
}
inline void Foo::set_has_age() {
  _impl_._oneof_case_[0] = kAge;
}
inline void Foo::clear_age() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kAge) {
    _impl_.item_.age_ = 0;
    clear_has_item();
  }
}
inline ::int32_t Foo::age() const {
  // @@protoc_insertion_point(field_get:Foo.age)
  return _internal_age();
}
inline void Foo::set_age(::int32_t value) {
  if (item_case() != kAge) {
    clear_item();
    set_has_age();
  }
  _impl_.item_.age_ = value;
  // @@protoc_insertion_point(field_set:Foo.age)
}
inline ::int32_t Foo::_internal_age() const {
  if (item_case() == kAge) {
    return _impl_.item_.age_;
  }
  return 0;
}

// bool is_male = 2;
inline bool Foo::has_is_male() const {
  return item_case() == kIsMale;
}
inline void Foo::set_has_is_male() {
  _impl_._oneof_case_[0] = kIsMale;
}
inline void Foo::clear_is_male() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kIsMale) {
    _impl_.item_.is_male_ = false;
    clear_has_item();
  }
}
inline bool Foo::is_male() const {
  // @@protoc_insertion_point(field_get:Foo.is_male)
  return _internal_is_male();
}
inline void Foo::set_is_male(bool value) {
  if (item_case() != kIsMale) {
    clear_item();
    set_has_is_male();
  }
  _impl_.item_.is_male_ = value;
  // @@protoc_insertion_point(field_set:Foo.is_male)
}
inline bool Foo::_internal_is_male() const {
  if (item_case() == kIsMale) {
    return _impl_.item_.is_male_;
  }
  return false;
}

// double power = 3;
inline bool Foo::has_power() const {
  return item_case() == kPower;
}
inline void Foo::set_has_power() {
  _impl_._oneof_case_[0] = kPower;
}
inline void Foo::clear_power() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kPower) {
    _impl_.item_.power_ = 0;
    clear_has_item();
  }
}
inline double Foo::power() const {
  // @@protoc_insertion_point(field_get:Foo.power)
  return _internal_power();
}
inline void Foo::set_power(double value) {
  if (item_case() != kPower) {
    clear_item();
    set_has_power();
  }
  _impl_.item_.power_ = value;
  // @@protoc_insertion_point(field_set:Foo.power)
}
inline double Foo::_internal_power() const {
  if (item_case() == kPower) {
    return _impl_.item_.power_;
  }
  return 0;
}

// .Bar innerBar = 4;
inline bool Foo::has_innerbar() const {
  return item_case() == kInnerBar;
}
inline bool Foo::_internal_has_innerbar() const {
  return item_case() == kInnerBar;
}
inline void Foo::set_has_innerbar() {
  _impl_._oneof_case_[0] = kInnerBar;
}
inline void Foo::clear_innerbar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (item_case() == kInnerBar) {
    if (GetArena() == nullptr) {
      delete _impl_.item_.innerbar_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      if (_impl_.item_.innerbar_ != nullptr) {
        _impl_.item_.innerbar_->Clear();
      }
    }
    clear_has_item();
  }
}
inline ::Bar* Foo::release_innerbar() {
  // @@protoc_insertion_point(field_release:Foo.innerBar)
  if (item_case() == kInnerBar) {
    clear_has_item();
    auto* temp = _impl_.item_.innerbar_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.item_.innerbar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Bar& Foo::_internal_innerbar() const {
  return item_case() == kInnerBar ? *_impl_.item_.innerbar_ : reinterpret_cast<::Bar&>(::_Bar_default_instance_);
}
inline const ::Bar& Foo::innerbar() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Foo.innerBar)
  return _internal_innerbar();
}
inline ::Bar* Foo::unsafe_arena_release_innerbar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Foo.innerBar)
  if (item_case() == kInnerBar) {
    clear_has_item();
    auto* temp = _impl_.item_.innerbar_;
    _impl_.item_.innerbar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Foo::unsafe_arena_set_allocated_innerbar(::Bar* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_item();
  if (value) {
    set_has_innerbar();
    _impl_.item_.innerbar_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Foo.innerBar)
}
inline ::Bar* Foo::_internal_mutable_innerbar() {
  if (item_case() != kInnerBar) {
    clear_item();
    set_has_innerbar();
    _impl_.item_.innerbar_ =
        ::google::protobuf::Message::DefaultConstruct<::Bar>(GetArena());
  }
  return _impl_.item_.innerbar_;
}
inline ::Bar* Foo::mutable_innerbar() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Bar* _msg = _internal_mutable_innerbar();
  // @@protoc_insertion_point(field_mutable:Foo.innerBar)
  return _msg;
}

// bytes properties = 5;
inline void Foo::clear_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.ClearToEmpty();
}
inline const std::string& Foo::properties() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Foo.properties)
  return _internal_properties();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Foo::set_properties(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Foo.properties)
}
inline std::string* Foo::mutable_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_properties();
  // @@protoc_insertion_point(field_mutable:Foo.properties)
  return _s;
}
inline const std::string& Foo::_internal_properties() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.properties_.Get();
}
inline void Foo::_internal_set_properties(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.Set(value, GetArena());
}
inline std::string* Foo::_internal_mutable_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.properties_.Mutable( GetArena());
}
inline std::string* Foo::release_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Foo.properties)
  return _impl_.properties_.Release();
}
inline void Foo::set_allocated_properties(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.properties_.IsDefault()) {
          _impl_.properties_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Foo.properties)
}

inline bool Foo::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void Foo::clear_has_item() {
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}
inline Foo::ItemCase Foo::item_case() const {
  return Foo::ItemCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_check_2doneof_2eproto_2epb_2eh
